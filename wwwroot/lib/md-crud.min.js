/**
 * md-crud - Angular material directive to create customizable CRUD forms.
 * @version v1.0.1
 * @link https://github.com/ClassHP/md-crud
 * @license MIT
 */
angular.module("mdCrudTemplates", []).run(["$templateCache", function (e) { e.put("/views/crud.html", '<div class="md-default" layout="row" layout-align="start center"><md-button class="md-raised md-primary" ng-click="table.create($event)" ng-if="!options.noCreate" ng-disabled="isLoading">{{translate(text.createOption)}}</md-button><div ng-if="options.templateTools" ng-include="options.templateTools" flex layout="row"></div><div ng-if="!options.templateTools" flex></div><div layout="row" ng-if="!options.noSearch" style="margin-bottom:5px"><md-button class="md-icon-button md-primary" ng-disabled="true"><md-icon>&#xE8B6;</md-icon></md-button><md-autocomplete md-search-text="searchText" type="search" placeholder="" md-items="item in []" md-search-text-change="onSearchTextChange(searchText)" md-delay="searchDelay"></md-autocomplete></div></div><div ng-if="formType == \'inline\' && rowCreate"><md-card flex layout-fill style="background-color: white"><md-crud-form options="options" ng-model="rowCreate" on-open="onOpen" on-edit="onEdit" on-detail="onDetail" on-cancel="onCancel" on-sussces="onSussces" on-submit="onSubmit" template-url="templateUrl" editable="true"></md-crud-form></md-card><br></div><div md-whiteframe="1"><md-table-container><table data-md-table md-progress="table.promise"><thead md-head data-md-order="table.order" md-on-reorder="table.onReorder" style="background-color: white"><tr md-row><th md-column ng-repeat="field in fields" ng-if="!field.columnHiden && !field.columnHidden" md-order-by="{{field.name}}">{{translate(field.columnHeader || field.label)}}</th><th md-column style="min-width:132px;width:132px" ng-if="!options.noDelete && !options.noEdit"></th><th md-column style="min-width:60px;width:60px" ng-if="(options.noEdit && !options.noDelete) || (!options.noEdit && options.noDelete)"></th></tr></thead><tbody md-body><tr md-row md-select="row" ng-repeat-start="row in (options.serverSide ? table.rows : (table.rows | orderBy: table.order | filter:searchText | limitTo: table.limit: (table.page - 1) * table.limit))" ng-mouseover="row.mouserover=true" ng-mouseleave="row.mouserover=false" ng-class="{ \'md-selected\': row.mouserover || rowSelected == row }" ng-click="table.onRowClick(row, $event)" style="cursor:pointer"><td md-cell ng-repeat="field in fields" ng-if="!field.columnHiden && !field.columnHidden" ng-style="field.styleCell" md-crud-template="getTemplateColumn(field, row)"></td><td md-cell ng-if="!options.noDelete || !options.noEdit"><md-button class="md-icon-button md-accent" ng-show="row.mouserover || rowSelected == row " ng-click="table.edit(row, $event)" ng-if="!options.noEdit"><md-icon>&#xE3C9;</md-icon></md-button><md-button class="md-icon-button md-warn" ng-show="row.mouserover || rowSelected == row " ng-click="table.delete(row[options.id], $event)" ng-if="!options.noDelete"><md-icon>&#xE92B;</md-icon></md-button></td></tr><tr ng-repeat-end ng-if="rowSelected == row"><td colspan="{{countFieldsColums()}}" style="max-width: 0"><md-card layout-fill style="background-color: white"><md-crud-form ng-if="formEditable" options="options" ng-model="row" on-open="onOpen" on-edit="onEdit" on-detail="onDetail" on-cancel="onCancel" on-sussces="onSussces" on-submit="onSubmit" template-url="templateUrl" editable="formEditable" model-copy="true"></md-crud-form><md-crud-form ng-if="!formEditable" options="options" ng-model="row" on-open="onOpen" on-edit="onEdit" on-detail="onDetail" on-cancel="onCancel" on-sussces="onSussces" on-submit="onSubmit" template-url="templateUrl" editable="formEditable" model-copy="true"></md-crud-form></md-card></td></tr></tbody></table></md-table-container><md-table-pagination ng-if="!options.noPaginate" md-limit="table.limit" md-limit-options="table.limitOptions" md-page="table.page" md-total="{{options.serverSide ? table.total : (table.rows | filter:searchText).length}}" md-page-select md-label="{{table.labels()}}" style="background-color: white" md-on-paginate="table.onPaginate"></md-table-pagination></div>'), e.put("/views/crudForm.html", '<div layout-padding><form name="formCrud" ng-submit="isFormValid(formCrud) && save()" novalidate><md-crud-form-base flex layout="row" layout-wrap options="options" ng-model="item" form-type="formType" editable="editable" form-crud="formCrud" is-loading="isLoading"></md-crud-form-base><div ng-repeat="message in errors" md-colors="{ color: \'default-warn\' }" flex="grow">{{translate(message)}}</div><div layout="row" layout-align="center center" flex="grow" ng-if="!(formType==\'detail\' && options.noDetailButtons) && !options.noButtons"><md-button class="md-raised" ng-click="cancel()" ng-disabled="isLoading">{{translate(options.formCancelText || text.formCancel)}}</md-button><div flex="5"></div><md-button class="md-raised md-primary" type="submit" ng-disabled="ef(options.readonly, item) || readonly || isLoading">{{translate(options.formSubmitText || text.formSubmit)}}</md-button></div></form></div>'), e.put("/views/crudFormBase.html", '<div ng-repeat="field in fields" flex="{{field.flex || \'grow\'}}" flex-xs="100" ng-style="field.style" ng-if="(formType==\'create\' && !ef(field.createHiden || field.createHidden, item)) || (formType==\'edit\' && !ef(field.editHiden || field.editHidden, item)) || (formType==\'detail\' && !ef(field.detailHiden || field.detailHidden, item))" ng-hide="field.type != \'group\' && field.groupId && options.groupSelected != field.groupId"><div ng-switch="ef(field.type, item)" ng-if="!field.templateUrl && !field.template"><md-input-container class="md-block" flex ng-switch-default ng-class="{ \'hide-error-msg\': field.hideErrorMsg }"><label>{{translate(field.label)}}</label><input ng-model="item[field.name]" name="{{field.name}}" ng-required="field.required" ng-disabled="ef(field.readonly, item) || ef(options.readonly, item) || readonly || isLoading" ng-minlength="field.minlength" ng-maxlength="field.maxlength" ng-blur="field.onChange && field.onChange(item, formType)" ng-pattern="field.pattern" md-crud-input-validator="field.errorMessage" item="item"><div ng-messages="formCrud[field.name].$error" ng-messages-multiple><div ng-messages-include="/views/crudFormMessages.html"></div></div></md-input-container><md-input-container class="md-block" flex ng-switch-when="textarea" ng-class="{ \'hide-error-msg\': field.hideErrorMsg }"><label>{{translate(field.label)}}</label><textarea ng-model="item[field.name]" name="{{field.name}}" ng-required="field.required" ng-disabled="ef(field.readonly, item) || ef(options.readonly, item) || readonly || isLoading" ng-minlength="field.minlength" ng-maxlength="field.maxlength" rows="{{ field.rows || 3 }}" md-select-on-focus ng-blur="field.onChange && field.onChange(item, formType)" md-crud-input-validator="field.errorMessage" item="item"></textarea><div ng-messages="formCrud[field.name].$error" ng-messages-multiple><div ng-messages-include="/views/crudFormMessages.html"></div></div></md-input-container><md-input-container class="md-block" flex ng-switch-when="email" ng-class="{ \'hide-error-msg\': field.hideErrorMsg }"><label>{{translate(field.label)}}</label><input ng-model="item[field.name]" name="{{field.name}}" ng-required="field.required" type="email" ng-disabled="ef(field.readonly, item) || ef(options.readonly, item) || readonly || isLoading" ng-minlength="field.minlength" ng-maxlength="field.maxlength" ng-pattern="field.pattern" ng-blur="field.onChange && field.onChange(item, formType)" md-crud-input-validator="field.errorMessage" item="item"><div ng-messages="formCrud[field.name].$error" ng-messages-multiple><div ng-messages-include="/views/crudFormMessages.html"></div></div></md-input-container><md-input-container class="md-block" flexemail flex ng-switch-when="integer" ng-class="{ \'hide-error-msg\': field.hideErrorMsg }"><label>{{translate(field.label)}}</label><input type="number" ng-model="item[field.name]" name="{{field.name}}" ng-required="field.required" md-crud-input-number ng-disabled="ef(field.readonly, item) || ef(options.readonly, item) || readonly || isLoading" ng-min="field.min" ng-max="field.max" step="{{field.step || 1}}" ng-blur="field.onChange && field.onChange(item, formType)" md-crud-input-validator="field.errorMessage" item="item"><div ng-messages="formCrud[field.name].$error" ng-messages-multiple><div ng-messages-include="/views/crudFormMessages.html"></div></div></md-input-container><md-input-container class="md-block" flex ng-switch-when="decimal" ng-class="{ \'hide-error-msg\': field.hideErrorMsg }"><label>{{translate(field.label)}}</label><input type="number" ng-model="item[field.name]" name="{{field.name}}" ng-required="field.required" md-crud-input-number ng-disabled="ef(field.readonly, item) || ef(options.readonly, item) || readonly || isLoading" ng-min="field.min" ng-max="field.max" step="{{field.step || \'any\'}}" ng-blur="field.onChange && field.onChange(item, formType)" md-crud-input-validator="field.errorMessage" item="item"><div ng-messages="formCrud[field.name].$error" ng-messages-multiple><div ng-messages-include="/views/crudFormMessages.html"></div></div></md-input-container><div class="md-block" flex ng-switch-when="image"><lf-ng-md-file-input name="{{field.name}}" lf-files="files[field.name]" lf-mimetype="image/*" lf-placeholder="{{field.label}}" lf-browse-label="Abrir" lf-remove-label="Eliminar"></lf-ng-md-file-input><div ng-messages="formCrud[field.name].$error" ng-messages-multiple><div ng-messages-include="/views/crudFormMessages.html"></div></div><br></div><div class="md-block" flex ng-switch-when="map"><ng-map zoom="{{field.zoom || 11}}" center="{{item[field.lat]}},{{item[field.lng]}}"><marker position="{{item[field.lat]}},{{item[field.lng]}}" title="drag me" draggable="true" on-dragend="onMarkerDrag()" data="{{field}}"></marker></ng-map></div><div class="md-block" flex ng-switch-when="boolean"><md-switch ng-model="item[field.name]" ng-disabled="ef(field.readonly, item) || ef(options.readonly, item) || readonly || isLoading" aria-label="field.label" ng-true-value="{{\'\\\'\'+ field.trueValue + \'\\\'\'}}" ng-if="field.trueValue" ng-change="field.onChange && field.onChange(item, formType)">{{translate(((item[field.name] == field.trueValue) ? field.trueLabel : field.falseLabel) || field.label)}}</md-switch><md-switch ng-model="item[field.name]" ng-disabled="ef(field.readonly, item) || ef(options.readonly, item) || readonly || isLoading" aria-label="field.label" ng-if="!field.trueValue" ng-change="field.onChange && field.onChange(item, formType)">{{translate((item[field.name] ? field.trueLabel : field.falseLabel) || field.label)}}</md-switch></div><md-input-container class="md-block" flex ng-switch-when="select" ng-class="{ \'hide-error-msg\': field.hideErrorMsg }"><label>{{translate(field.label)}}</label><md-select ng-model="item[field.name]" ng-if="field.multiple" name="{{field.name}}" multiple="multiple" ng-disabled="ef(field.readonly, item) || ef(options.readonly, item) || readonly || isLoading" ng-required="field.required" ng-change="field.onChange && field.onChange(item, formType)" md-crud-input-validator="field.errorMessage" item="item" md-on-open="field.onOpen(item)" md-on-close="field.search = \'\'" ng-init="field.search = \'\'"><md-select-header ng-if="field.showSearch" class="md-crud-select-header"><input ng-model="field.search" type="search" placeholder="{{ field.searchPlaceholder || \'Search...\'}}" class="md-text md-crud-select-header-searchbox" ng-keydown="$event.stopPropagation()"></md-select-header><md-option ng-value="option[field.value || \'value\']" ng-repeat="option in ef(field.data, item) | filter:field.search"><md-text md-crud-template="templateSelect(field)"></md-text></md-option></md-select><md-select ng-model="item[field.name]" ng-if="!field.multiple" name="{{field.name}}" ng-disabled="ef(field.readonly, item) || ef(options.readonly, item) || readonly || isLoading" ng-required="field.required" ng-change="field.onChange && field.onChange(item, formType)" md-crud-input-validator="field.errorMessage" item="item" md-on-open="field.onOpen(item)" md-on-close="field.search = \'\'" ng-init="field.search = \'\'"><md-select-header ng-if="field.showSearch" class="md-crud-select-header"><input ng-model="field.search" type="search" placeholder="{{ field.searchPlaceholder || \'Search...\'}}" class="md-text md-crud-select-header-searchbox" ng-keydown="$event.stopPropagation()"></md-select-header><md-option ng-if="!field.required">{{field.emptyOption}}</md-option><md-option ng-value="option[field.value || \'value\']" ng-repeat="option in ef(field.data, item) | filter:field.search" md-crud-template="templateSelect(field)"></md-option></md-select><div ng-messages="formCrud[field.name].$error" ng-messages-multiple><div ng-messages-include="/views/crudFormMessages.html"></div></div></md-input-container><md-input-container class="md-block" flex ng-switch-when="date" ng-class="{ \'hide-error-msg\': field.hideErrorMsg }"><label>{{translate(field.label)}}</label><md-datepicker ng-model="item[field.name]" name="{{field.name}}" md-min-date="ef(field.minDate, item)" md-max-date="ef(field.maxDate, item)" ng-disabled="ef(field.readonly, item) || ef(options.readonly, item) || readonly || isLoading" ng-required="field.required" md-crud-input-date aria-label="{{translate(field.label)}}" ng-change="field.onChange && field.onChange(item, formType)"></md-datepicker><div ng-messages="formCrud[field.name].$error" ng-messages-multiple><div ng-messages-include="/views/crudFormMessages.html"></div></div></md-input-container><md-input-container class="md-block" ng-switch-when="time" flex ng-class="{ \'hide-error-msg\': field.hideErrorMsg }"><label style="margin-left: 50px">{{translate(field.label)}}</label><div class="" layout="row" layout-align="start start"><md-button layout-nowrap ng-click="showTimePicker($event, item, field.name)" class="md-datepicker-button md-icon-button md-button md-ink-ripple" ng-disabled="ef(field.readonly, item) || ef(options.readonly, item) || readonly || isLoading"><md-icon>access_time</md-icon></md-button><div flex><input class="md-datepicker-input md-input" type="time" name="{{field.name}}" ng-model="item[field.name]" md-crud-input-date aria-label="{{translate(field.label)}}" ng-required="field.required" flex ng-min="ef(field.min, item)" ng-max="ef(field.max, item)" ng-disabled="ef(field.readonly, item) || ef(options.readonly, item) || readonly || isLoading" ng-blur="field.onChange && field.onChange(item, formType)" md-crud-input-validator="field.errorMessage" item="item"><div ng-messages="formCrud[field.name].$error" ng-messages-multiple><div ng-messages-include="/views/crudFormMessages.html"></div></div></div></div></md-input-container><div class="md-block" ng-switch-when="datetime" flex layout="row" layout-align="start start"><md-input-container flex="none"><label style="overflow: visible;\r\n                        -webkit-transform: translate3d(0, 6px, 0) scale(0.75);\r\n                        transform: translate3d(0, 6px, 0) scale(0.75);\r\n                        -webkit-transition: width cubic-bezier(0.25, 0.8, 0.25, 1) 0.4s, -webkit-transform cubic-bezier(0.25, 0.8, 0.25, 1) 0.4s;\r\n                        transition: width cubic-bezier(0.25, 0.8, 0.25, 1) 0.4s, -webkit-transform cubic-bezier(0.25, 0.8, 0.25, 1) 0.4s;\r\n                        transition: transform cubic-bezier(0.25, 0.8, 0.25, 1) 0.4s, width cubic-bezier(0.25, 0.8, 0.25, 1) 0.4s;\r\n                        transition: transform cubic-bezier(0.25, 0.8, 0.25, 1) 0.4s, width cubic-bezier(0.25, 0.8, 0.25, 1) 0.4s, -webkit-transform cubic-bezier(0.25, 0.8, 0.25, 1) 0.4s">{{translate(field.label)}}</label><md-datepicker layout-nowrap ng-model="item[field.name]" name="{{field.name}}" md-min-date="ef(field.minDate, item)" md-max-date="ef(field.maxDate, item)" ng-disabled="ef(field.readonly, item) || ef(options.readonly, item) || readonly || isLoading" ng-required="field.required" md-crud-input-date aria-label="{{translate(field.label)}}" ng-change="field.onChange && field.onChange(item, formType)"></md-datepicker><div ng-messages="formCrud[field.name].$error" ng-messages-multiple><div ng-messages-include="/views/crudFormMessages.html"></div></div></md-input-container><md-input-container><div class="" layout="row" layout-align="start start"><md-button layout-nowrap ng-click="showTimePicker($event, item, field.name)" class="md-datepicker-button md-icon-button md-button md-ink-ripple" ng-disabled="ef(field.readonly, item) || ef(options.readonly, item) || readonly || isLoading"><md-icon>access_time</md-icon></md-button><div flex><input class="md-datepicker-input md-input" type="time" name="{{field.name}}" ng-model="item[field.name]" md-crud-input-date aria-label="{{translate(field.label)}}" ng-required="field.required" flex ng-min="field.min" ng-max="field.max" ng-disabled="ef(field.readonly, item) || ef(options.readonly, item) || readonly || isLoading" ng-blur="field.onChange && field.onChange(item, formType)" md-crud-input-validator="field.errorMessage" item="item"><div ng-messages="formCrud[field.name].$error" ng-messages-multiple><div ng-messages-include="/views/crudFormMessages.html"></div></div></div></div></md-input-container></div><div class="md-block" ng-switch-when="button" flex layout-align="{{field.align}}"><md-button ng-class="field.class" ng-click="field.onClick(item)"><md-icon ng-if="field.icon">{{field.icon}}</md-icon><md-tooltip md-autohide ng-if="field.tooltip">{{translate(field.tooltip)}}</md-tooltip>{{translate(field.label)}}</md-button></div><div class="md-block" ng-switch-when="group" flex layout-align="{{field.align}}"><span ng-click="options.groupSelected = (field.groupId == options.groupSelected)? null : field.groupId" flex style="cursor: pointer">{{translate(field.label)}}</span></div><div class="md-block" flex ng-switch-when="label"><span>{{translate(field.label)}}</span></div></div><div ng-if="field.templateUrl" ng-include="field.templateUrl"></div><div ng-if="field.template" md-crud-template="ef(field.template, item)"></div></div>'), e.put("/views/crudFormDialog.html", '<md-dialog aria-label="Editar" flex="{{options.windowFlex}}"><md-toolbar><div class="md-toolbar-tools"><h2>{{ formTitle }}</h2><span flex></span><md-button class="md-icon-button" ng-click="cancelDialog()"><md-icon aria-label="Cerrar">close</md-icon></md-button></div></md-toolbar><md-dialog-content><md-crud-form options="options" ng-model="item" on-open="onOpen" on-edit="onEdit" on-detail="onDetail" on-cancel="onCancelDialog" on-sussces="onSusscesDialog" template-url="templateUrl" editable="formEditable" model-copy="true"></md-crud-form></md-dialog-content></md-dialog>'), e.put("/views/crudFormMessages.html", '<div ng-message="required">{{translate(field.messageRequired || text.messageRequired)}}</div><div ng-message="minlength">{{translate(field.messageMinlength || text.messageMinlength)}} ({{field.minlength}}).</div><div ng-message="maxlength">{{translate(field.messageMaxlength || text.messageMaxlength)}} ({{field.maxlength}}).</div><div ng-message="pattern">{{translate(field.messagePattern || text.messagePattern)}}</div><div ng-message="min">{{translate(field.messageMin || text.messageMin)}} ({{field.min}}).</div><div ng-message="max">{{translate(field.messageMax || text.messageMax)}} ({{field.max}}).</div><div ng-message="mimetype">{{translate(field.messageMimetype || text.messageMimetype)}}</div><div ng-message="valid">{{translate(field.messageValid || text.messageValid)}}</div><div ng-message="mindate">{{translate(field.messageMindate || text.messageMindate)}} {{field.minDate | date:\'shortDate\'}}.</div><div ng-message="maxdate">{{translate(field.messageMaxdate || text.messageMaxdate)}} {{field.maxDate | date:\'shortDate\'}}.</div><div ng-message="mdCrudInputValidator">{{translate(ef(field.errorMessage, item[field.name], item))}}</div>') }]), function () { "use strict"; angular.module("mdCrudModule", ["mdCrudTemplates"]) }(), function () { "use strict"; function e(e, t, i, n, l) { function a(a, o, r) { var d = e.text; a.text = d; var s = e.options.translate; a.translate = s; var m = a.options; m.id = m.id || "id", a.formType = t.evalDefined([r.formType, m.formType, e.options.formType]); var f = t.evalDefined([r.deleteConfirm, m.deleteConfirm, e.options.deleteConfirm]), u = t.evalDefined([r.autoRefresh, m.autoRefresh, e.options.autoRefresh]), c = t.evalDefined([r.getParams, m.getParams, {}]); a.searchText = r.searchText || m.searchText || "", a.searchDelay = r.searchDelay || m.searchDelay || (m.serverSide ? 500 : 0), a.fields = m.fields, a.rowSelected = null, a.rowCreate = null; var g = a.ef = t.evalFunction; a.stringToHtml = function (e, t) { return l.trustAsHtml(n(e)(t)) }, m.offline || (a.isLoading = !0), a.getTemplateColumn = function (t, i) { var n = t.templateColumn || t.columnTemplate || e.templateColumns[g(t.type, i) || "default"] || e.templateColumns.default; return n.replace("row[field.name]", "row." + t.name) }, a.getTemplateSelect = function (e) { return e.templateSelect ? e.templateSelect.replace("option", "getOptionSelect(field, row)") : "{{translate(getOptionSelect(field, row)." + (e.text || "text") + ")}}" }, a.getOptionSelect = function (e, i) { var n = t.evalFunction(e.data, i); for (var l in n) if (n[l][e.value || "value"] == i[e.name]) return n[l]; return i }, a.onSearchTextChange = function (e) { a.searchText = e, m.serverSide && p.searchParam && (a.table.page = 1, m.refresh()) }; var p = angular.copy(e.options.serverSide || {}); m.serverSide && "boolean" != typeof m.serverSide && angular.extend(p, m.serverSide), a.countFieldsColums = function () { var e = 0; for (var t in m.fields) { var i = m.fields[t]; i.columnHiden || i.columnHidden || e++ } return e + 2 }; var v = function (t) { t.data || e.get({ entity: t.entity }).then(function (e) { t.data = e.data }) }; for (var h in m.fields) { var b = m.fields[h]; b.entity && v(b) } a.table = { rows: a.rows || [], refresh: function (t) { a.isLoading = !0, angular.extend(c, t); var i = angular.copy(m.http || {}); return i.entity = m.entity, i.params = angular.copy(i.params || {}), angular.extend(i.params, c), m.serverSide && (i.params[p.pageParam] = a.table.page, i.params[p.offsetParam] = (a.table.page - 1) * a.table.limit, i.params[p.limitParam] = a.table.limit, i.params[p.searchParam] = "" != a.searchText ? a.searchText : void 0), a.table.promise = e.get(i).then(function (e) { a.isLoading = !1, m.serverSide ? (a.table.rows = e.data[p.dataResponse], a.table.total = e.data[p.totalResponse]) : a.table.rows = e.data }), a.table.promise }, create: function (e) { e && e.stopPropagation(), a.rowSelected = null, a.rowCreate = {}, "window" == a.formType && w({}, !0, e).then(function (e) { }) }, edit: function (e, t) { t.stopPropagation(), e[m.id] && ("inline" == a.formType && (a.rowCreate = null, a.selectRow(e, !0)), "window" == a.formType && w(e, !0, t).then(function (e) { })) }, detail: function (e, t) { return m.editOnSelect ? void a.table.edit(e, t) : (t.stopPropagation(), "inline" == a.formType && (a.rowCreate = null, a.rowSelected == e ? a.rowSelected = null : m.noDetail || a.selectRow(e, !1)), void ("window" == a.formType && w(e, !1, t).then(function (e) { }))) }, delete: function (i, l) { a.rowSelected = null, l.stopPropagation(); var o, r = this, u = this.rows.findIndex(function (e) { return e[m.id] == i }); if (m.offline) o = function () { r.rows.splice(u, 1) }; else { var c = angular.copy(m.http || {}); c.entity = m.entity, c.id = i, o = function () { e.delete(c).then(function (e) { r.rows.splice(u, 1) }, function (e) { var i = d.deleteError; e && e.error && (i = e.error), t.showAlert(s(d.deleteErrorTitle), s(i), s(d.btnAlertOk)) }) } } if (f) { var g = r.rows[u], p = n(m.deleteConfirmMessage || d.deleteConfirmMessage)(g); t.showConfirm(s(d.deleteConfirmTitle), s(p), s(d.deleteConfirmOk), s(d.btnConfirmCancel), s(d.btnConfirmCancel)).then(function () { o() }) } else o() }, promise: null, order: "", limit: t.evalDefined([r.tableLimit, m.tableLimit, e.options.tableLimit]), limitOptions: t.evalDefined([r.limitOptions, m.limitOptions, e.options.limitOptions]), page: 1, rowSelection: !1, selected: [], labels: function () { return { page: s(d.tablePaginationPage), rowsPerPage: s(d.tablePaginationRowsPerPage), of: s(d.tablePaginationOf) } }, onPaginate: function () { m.serverSide && a.table.refresh() }, onReorder: function () { m.serverSide && a.table.refresh() }, onRowClick: function (e, t) { a.table.detail(e, t), m.onRowClick && m.onRowClick(e, t) } }, m.refresh = function (e) { return a.table.refresh(e) }, m.create = function () { a.table.create() }, m.cancel = function () { a.rowSelected = null, a.rowCreate = null, i.cancel() }, m.edit = function (e) { for (var t in a.table.rows) { var i = a.table.rows[t]; if (i[m.id] == e) return "inline" == a.formType && (a.rowCreate = null, a.selectRow(i, !0)), void ("window" == a.formType && w(i, !0, ev).then(function (e) { })) } }, u && m.refresh(); var w = function (e, t, n) { return a.formEditable = t, i.show({ controller: ["$scope", "$mdDialog", "mdCrudService", "item", "options", y], templateUrl: "/views/crudFormDialog.html", clickOutsideToClose: !0, fullscreen: !0, scope: a, preserveScope: !0, controllerAs: "vm", locals: { item: e, options: m }, targetEvent: n, parent: o }) }; a.templateUrl = (m.form || {}).templateUrl, a.onOpen = function (e, t) { (m.form || {}).onOpen && m.form.onOpen(e, t) }, a.onEdit = function (e) { (m.form || {}).onEdit && m.form.onEdit(e) }, a.onDetail = function (e) { (m.form || {}).onDetail && m.form.onDetail(e) }, a.onCancel = function (e) { (m.form || {}).onCancel && m.form.onCancel(e), a.rowSelected = null, a.rowCreate = null, e && t.showAlert(s(d.generalErrorTitle), s(e), s(d.btnAlertOk)) }, a.onSussces = function (e, t) { (m.form || {}).onSussces && m.form.onSussces(e, t), "create" != t || m.noCreateAdd || a.table.rows.unshift(e), a.rowSelected = null, a.rowCreate = null }, a.onSubmit = function (e, t) { (m.form || {}).onSubmit && m.form.onSubmit(e, t) }, a.selectRow = function (e, t) { a.rowSelected = e, a.formEditable = t }; var y = function (e, t, i, n, l) { e.formTitle = s(n[l.id] ? e.formEditable ? d.editTitle : d.detailTitle : d.createTitle), e.item = n, e.onCancelDialog = function (i) { e.onCancel(i), t.cancel() }, e.onSusscesDialog = function (i, n) { e.onSussces(i, n), t.hide(i) }, e.cancelDialog = function () { e.onCancelDialog() } }; a.onLoad && a.onLoad() } var o = { link: a, restrict: "EA", scope: { options: "=", onLoad: "=", rows: "=" }, templateUrl: "/views/crud.html" }; return o } angular.module("mdCrudModule").directive("mdCrud", e), e.$inject = ["mdCrudService", "mdCrudToolsService", "$mdDialog", "$interpolate", "$sce"] }(), function () { "use strict"; function e(e, t, i, n, l, a, o) { function r(i, a, r) { var s = e.text; i.text = s; var m = e.options.translate; i.translate = m, i.stringToHtml = function (e, t) { return l.trustAsHtml(n(e)(t)) }, i.templateSelect = function (e) { var t = e.templateSelect || "<translate>{{option." + (e.text || "text") + "}}</translate>"; return t }, i.getModel = function (e, i) { return i.model ? t.evalFunction(i.model, e) : e[i.name] }; var f = i.options; i.fields = f.fields, i.readonly = 0 == i.editable, i.ef = t.evalFunction, i.isLoading = !1, i.item = i.modelCopy ? angular.copy(i.ngModel || {}) : i.ngModel; var u = i.item[f.id]; if (i.formTitle = u ? i.editable ? s.editTitle : s.detailTitle : s.createTitle, i.formType = u ? i.editable ? "edit" : "detail" : "create", i.getContentUrl = function (e, t) { return i.templateUrl || "/views/crudForm.html" }, i.showTimePicker = function (e, t, i) { d && d(t[i], { targetEvent: e }).then(function (e) { t[i] = e }) }, i.onOpen && i.onOpen(i.item, i.formType), u && !f.offline) { i.isLoading = !0; var c = angular.copy(f.http || {}); c.entity = f.entity, c.id = u, e.getById(c).then(function (e) { angular.extend(i.item, e.data), "edit" == i.formType && i.onEdit && i.onEdit(i.item), "detail" == i.formType && i.onDetail && i.onDetail(i.item), i.isLoading = !1 }, function (e) { i.onError && i.onError(e), i.cancel(e) }) } i.save = function () { if (i.onSubmit && i.onSubmit(i.item, i.formType), f.offline) angular.extend(i.ngModel, i.item), i.onSussces && i.onSussces(i.item, i.formType); else { var t, n = angular.copy(f.http || {}); n.entity = f.entity, n.data = i.item, u ? (n.id = i.ngModel[f.id], t = e.patch(n)) : t = e.post(n), i.isLoading = !0, t.then(function (e) { angular.extend(i.ngModel, e.data), i.onSussces && i.onSussces(e.data, i.formType), i.isLoading = !1 }, function (e) { e.details ? i.errors = e.details : i.errors = [e.error], i.onError && i.onError(e), i.isLoading = !1 }) } }, i.cancel = function (e) { i.onCancel && i.onCancel(e) }, i.onMarkerDrag = function (e) { i.item[this.data.lat] = e.latLng.lat(), i.item[this.data.lng] = e.latLng.lng() }, i.isFormValid = function (e) { return !!e.$valid || (o[0].querySelector("form .ng-invalid").focus(), !1) } } var d; try { d = i.get("$mdpTimePicker") } catch (e) { } var s = { link: r, restrict: "EA", scope: { options: "=", ngModel: "=", onOpen: "=", onEdit: "=", onDetail: "=", onCancel: "=", onSussces: "=", onSubmit: "=", templateUrl: "<?", editable: "<?", modelCopy: "<?" }, template: '<div ng-include="getContentUrl()"></div>' }; return s } angular.module("mdCrudModule").directive("mdCrudForm", e), e.$inject = ["mdCrudService", "mdCrudToolsService", "$injector", "$interpolate", "$sce", "$compile", "$document"] }(), function () { "use strict"; function e(e, t, i, n, l, a, o) { function r(i, a, o) { var r = e.text; i.text = r, i.formType = i.formType || "detail"; var s = e.options.translate; i.translate = s, i.stringToHtml = function (e, t) { return l.trustAsHtml(n(e)(t)) }, i.templateSelect = function (e) { var t = e.templateSelect || "<translate>{{option." + (e.text || "text") + "}}</translate>"; return t }; var m = i.options; i.fields = m.fields, i.readonly = 0 == i.editable; var f = function (t) { t.data || e.get({ entity: t.entity }).then(function (e) { t.data = e.data }) }; for (var u in m.fields) { var c = m.fields[u]; c.entity && f(c) } i.ef = t.evalFunction; i.ngModel[m.id]; i.item = i.ngModel, i.showTimePicker = function (e, t, i) { d && d(t[i], { targetEvent: e }).then(function (e) { t[i] = e }) }, i.onMarkerDrag = function (e) { i.item[this.data.lat] = e.latLng.lat(), i.item[this.data.lng] = e.latLng.lng() } } var d; try { d = i.get("$mdpTimePicker") } catch (e) { } var s = { link: r, restrict: "EA", scope: { options: "=", ngModel: "=", formType: "=", formCrud: "=", editable: "<?", isLoading: "=" }, templateUrl: "/views/crudFormBase.html" }; return s } angular.module("mdCrudModule").directive("mdCrudFormBase", e), e.$inject = ["mdCrudService", "mdCrudToolsService", "$injector", "$interpolate", "$sce", "$compile", "$document"] }(), function () { "use strict"; angular.module("mdCrudModule").directive("mdCrudInputNumber", function () { return { require: "ngModel", link: function (e, t, i, n) { n.$parsers.push(function (e) { return "number" != typeof e ? parseFloat(e) : e }), n.$formatters.push(function (e) { return "number" != typeof e ? parseFloat(e) : e }) } } }).directive("mdCrudInputBoolean", function () { return { require: "ngModel", link: function (e, t, i, n) { n.$parsers.push(function (e) { return "boolean" != typeof e ? "true" == e : e }), n.$formatters.push(function (e) { return "boolean" != typeof e ? "true" == e : e }) } } }).directive("mdCrudInputDate", function () { return { require: "ngModel", link: function (e, t, i, n) { n.$parsers.push(function (e) { return e instanceof Date ? e : new Date(e) }), n.$formatters.push(function (e) { return e instanceof Date ? e : new Date(e) }) } } }).directive("mdCrudInputValidator", function () { return { require: "ngModel", scope: { validator: "=mdCrudInputValidator", item: "=item" }, link: function (e, t, i, n) { n.$validators.mdCrudInputValidator = function (t) { return angular.isFunction(e.validator) ? !angular.isDefined(e.validator(t, e.item)) : !angular.isDefined(e.validator) } } } }) }(), function () { "use strict"; function e(e) { return function (t, i, n) { t.$watch(function (e) { return e.$eval(n.mdCrudTemplate) }, function (n) { i.html(n), e(i.contents())(t) }) } } angular.module("mdCrudModule").directive("mdCrudTemplate", e), e.$inject = ["$compile"] }(), function () {
    "use strict"; function e(e, t, i, n) {
        var l = { rootApi: "/api", methodGet: "GET", methodPost: "POST", methodPatch: "PATCH", methodDelete: "DELETE", urlGet: "{{rootApi}}/{{entity}}", urlGetById: "{{rootApi}}/{{entity}}/{{id}}", urlPost: "{{rootApi}}/{{entity}}", urlPatch: "{{rootApi}}/{{entity}}/{{id}}", urlDelete: "{{rootApi}}/{{entity}}/{{id}}", functionHttp: function (n, a) { return n.functionHttp ? n.functionHttp(n) : e(function (e, o) { i({ url: t(n.url)(n), method: n.method, params: n.params, data: n.data }).then(function (t) { (n.functionData || l.functionData)(t, e, o, a) }, function (e) { o(e.data) }) }) }, functionData: function (e, t, i, n) { t(e) }, formType: "inline", deleteConfirm: !0, tableLimit: 10, limitOptions: [10, 20, 30], translate: function (e) { return e }, autoRefresh: !0, serverSide: { pageParam: "page", offsetParam: "offset", limitParam: "limit", searchParam: "search", dataResponse: "data", totalResponse: "total" } }, a = {
            editTitle: "Edit", detailTitle: "Detail", createTitle: "Create", deleteError: "Error while trying to delete row", deleteErrorTitle: "Error deleting", deleteConfirmTitle: "Delete", deleteConfirmMessage: "Are you sure you want to delete the row?", tablePaginationPage: "Page", tablePaginationRowsPerPage: "Rows per page:", tablePaginationOf: "of", createOption: "Create", btnConfirmOk: "Yes", btnConfirmCancel: "No", btnAlertOk: "Ok", generalErrorTitle: "Error",
            messageRequired: "Required", messageMinlength: "Min length", messageMaxlength: "Max length", messagePattern: "Invalid input format.", messageMin: "Min value", messageMax: "Max value", messageMimetype: "Invalid file type.", messageValid: "Invalid input format.", messageMindate: "Min date", messageMaxdate: "Max date", formCancel: "Cancel", formSubmit: "Save"
        }, o = { boolean: '<span><md-switch ng-model="row[field.name]" ng-disabled="true" aria-label="{{translate(field.label)}}" ng-true-value="{{\'\\\'\'+ field.trueValue + \'\\\'\'}}" ng-if="field.trueValue">{{translate(((row[field.name] == field.trueValue)? field.trueLabel : field.falseLabel) || "")}}</md-switch></span><span><md-switch ng-model="row[field.name]" ng-disabled="true" aria-label="{{translate(field.label)}}" ng-if="!field.trueValue">{{translate((row[field.name] ? field.trueLabel : field.falseLabel) || "")}}</md-switch></span>', image: '<image ng-src="{{row[field.name]}}" style="max-height:90px"></image>', date: '<span>{{ row[field.name] | date:"shortDate" }}</span>', time: '<span>{{ row[field.name] | date:"shortTime" }}</span>', datetime: '<span>{{ row[field.name] | date:"short" }}</span>', select: '<span md-crud-template="getTemplateSelect(field, row)"></span>', text: "<span>{{translate(row[field.name])}}</span>", button: '<md-button ng-class="field.class" ng-click="field.onClick(row, $event) || $event.stopPropagation()"><md-icon ng-if="field.icon">{{field.icon}}</md-icon><md-tooltip md-autohide ng-if="field.tooltip">{{translate(field.tooltip)}}</md-tooltip>{{translate(field.label)}}</md-button>', default: "<span>{{translate(row[field.name])}}</span>" }; return { templateColumns: o, options: l, setDefaultTemplateColumns: function (e) { angular.extend(o, n.removeNull(e)) }, setDefaultOptions: function (e) { angular.extend(l, n.removeNull(e)) }, text: a, setDefaultText: function (e) { angular.extend(a, n.removeNull(e)) }, get: function (e) { var t = { url: e.urlGet || l.urlGet, method: e.methodGet || l.methodGet, rootApi: l.rootApi }; return angular.extend(t, n.removeNull(e)), l.functionHttp(t, "get") }, getById: function (e) { var t = { url: e.urlGetById || l.urlGetById, method: e.methodGet || l.methodGet, rootApi: l.rootApi }; return angular.extend(t, n.removeNull(e)), l.functionHttp(t, "getById") }, post: function (e) { var t = { url: e.urlPost || l.urlPost, method: e.methodPost || l.methodPost, rootApi: l.rootApi }; return angular.extend(t, n.removeNull(e)), l.functionHttp(t, "post") }, patch: function (e) { var t = { url: e.urlPatch || l.urlPatch, method: e.methodPatch || l.methodPatch, rootApi: l.rootApi }; return angular.extend(t, n.removeNull(e)), l.functionHttp(t, "patch") }, delete: function (e) { var t = { url: e.urlDelete || l.urlDelete, method: e.methodDelete || l.methodDelete, rootApi: l.rootApi }; return angular.extend(t, n.removeNull(e)), l.functionHttp(t, "delete") } }
    } angular.module("mdCrudModule").service("mdCrudService", ["$q", "$interpolate", "$http", "mdCrudToolsService", e])
}(), function () { "use strict"; function e(e) { return { showConfirm: function (t, i, n, l) { n = n || "Yes", l = l || "No"; var a = e.confirm().title(t).ariaLabel(t).textContent(i).ok(n).cancel(l); return e.show(a) }, showAlert: function (t, i, n) { n = n || "Ok", e.show(e.alert().clickOutsideToClose(!0).title(t).ariaLabel(t).textContent(i).ok(n)) }, getBase64: function (e) { return $q(function (t, i) { var n = new FileReader; n.readAsDataURL(e), n.onload = function () { t(n.result) }, n.onerror = function (e) { i(e) } }) }, removeNullRecursive: function (e) { var t = function (e, i) { var n = i[e]; if (null === n || void 0 === n) delete i[e]; else if ("object" == typeof n) for (var l in n) t(l, n) }; for (var i in e) t(i, e); return e }, removeNull: function (e) { for (var t in e) { var i = e[t]; null !== i && void 0 !== i || delete e[t] } return e }, evalFunction: function (e, t, i, n, l, a) { return angular.isFunction(e) ? e(t, i, n, l, a) : e }, evalDefined: function (e) { for (var t in e) if (angular.isDefined(e[t])) return e[t] } } } angular.module("mdCrudModule").service("mdCrudToolsService", ["$mdDialog", e]) }();